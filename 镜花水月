local Services = setmetatable({}, {
	__index = function(_, k)
		return game:GetService(k)
	end
})

local ENV = (getgenv and getgenv()) or _G
local _CONFIGS = ENV._CONFIGS or {}
if type(_CONFIGS) ~= "table" then
	_CONFIGS = {}
end
if type(_CONFIGS.UI_NAME) ~= "string" or _CONFIGS.UI_NAME == "" then
	_CONFIGS.UI_NAME = "UniversalUI"
end
ENV._CONFIGS = _CONFIGS

local UDim = UDim
local UDim2 = UDim2
local Color3 = Color3
local Vector2 = Vector2
local TweenService = Services.TweenService
local Players = Services.Players
local UserInputService = Services.UserInputService

local dm = UDim.new
local dn = UDim2.new
local dp = Color3.fromRGB
local New = Instance.new
local noop = function() end

local THEME = {}

THEME.SURFACE = {
	WINDOW   = dp(242, 244, 247),
	TITLEBAR = dp(234, 237, 242),
	SIDEBAR  = dp(234, 237, 242),
	PANEL    = dp(242, 244, 247),
	CARD     = dp(234, 237, 242),
	CARD_ALT = dp(236, 239, 244),
}

THEME.TEXTS = {
	PRIMARY     = dp(28, 30, 33),
	SECONDARY   = dp(105, 110, 120),
	PLACEHOLDER = dp(130, 135, 145),
	INVERT      = dp(255, 255, 255)
}

THEME.BORDERS = {
	SOFT   = dp(214, 219, 228),
	MEDIUM = dp(204, 210, 220),
	HARD   = dp(186, 192, 205),
}

THEME.CONTROL = {
	INPUT_BG        = dp(225, 229, 236),
	INPUT_BG_FOCUS  = dp(220, 224, 232),
	DROPDOWN_BG      = dp(242, 244, 247),
	DROPDOWN_ITEM_BG = dp(234, 237, 242),
	SLIDER_BAR_BG = dp(206, 212, 222),
	SLIDER_FILL   = dp(56, 126, 226),
	TOGGLE_OFF_START = dp(229, 231, 235),
	TOGGLE_OFF_END   = dp(209, 213, 219),
	TOGGLE_ON_START  = dp(52, 199, 89),
	TOGGLE_ON_END    = dp(48, 209, 88),
	ICON_PRIMARY = dp(28, 30, 33),
	ICON_MUTED   = dp(105, 110, 120),
}

THEME.STATE = {
	ACCENT  = dp(56, 126, 226),
	SUCCESS = dp(46, 160, 85),
	DANGER  = dp(214, 73, 60),
	WARNING = dp(245, 190, 75),
}

THEME.GLOW = {
	START = dp(176, 180, 190),
	MID   = dp(140, 146, 156),
	END   = dp(176, 180, 190),
}

THEME.SCROLLBAR = {
	TRACK = dp(234, 237, 242),
	THUMB = dp(206, 212, 222),
}

THEME.ALPHA = {
	STROKE_CONTAINER = 0.45,
	STROKE_CARD      = 0.55,
	STROKE_INPUT     = 0.65,
}

THEME.WHITE   = THEME.SURFACE.CARD
THEME.SHEET   = THEME.SURFACE.TITLEBAR
THEME.INPUT   = THEME.CONTROL.INPUT_BG
THEME.BAR     = THEME.CONTROL.SLIDER_BAR_BG
THEME.TEXT    = THEME.TEXTS.PRIMARY
THEME.SUBTEXT = THEME.TEXTS.SECONDARY
THEME.BORDER  = THEME.BORDERS.MEDIUM
THEME.ACCENT  = THEME.STATE.ACCENT
THEME.GOOD    = THEME.STATE.SUCCESS
THEME.BAD     = THEME.STATE.DANGER
THEME.GL1     = THEME.GLOW.START
THEME.GL2     = THEME.GLOW.MID

THEME.MAIN    = THEME.SURFACE.WINDOW
THEME.SECTION = THEME.SURFACE.CARD

local R = {
	big = dm(0,12),
	mid = dm(0,10),
	small = dm(0,8),
	tiny = dm(0,4),
	micro = dm(0,2),
}

local library = ENV.library or {}
ENV.library = library

library.flags = library.flags or {
	GetState = function(self, key)
		local f = rawget(library.flags, key)
		return f and f.State or nil
	end
}
library.modules = library.modules or {}
library.currentTab = library.currentTab or nil

function library:UpdateToggle(key, state)
	local flag = library.flags[key]
	if not flag then return end
	local desired = (state ~= nil) and state or (not library.flags:GetState(key))
	if desired == library.flags:GetState(key) then return end
	flag:SetState(desired)
end

local tween = {}
function tween:Create(obj, props, duration, style, dir)
	return TweenService:Create(
		obj,
		TweenInfo.new(duration or 0.25, Enum.EasingStyle[style or "Linear"], Enum.EasingDirection[dir or "InOut"]),
		props
	)
end

function tween:SwitchTab(newTabBundle)
	local current = library.currentTab
	if current == newTabBundle then return end
	library.currentTab = newTabBundle
	if current and current[2] and current[2]:FindFirstChild("Glow") then
		tween:Create(current[2].Glow, { Transparency = 1 }, 0.2, "Sine", "Out"):Play()
	end
	if newTabBundle and newTabBundle[2] and newTabBundle[2]:FindFirstChild("Glow") then
		tween:Create(newTabBundle[2].Glow, { Transparency = 0 }, 0.2, "Sine", "Out"):Play()
	end
	if current and current[1] then
		current[1].Visible = false
	end
	if newTabBundle and newTabBundle[1] then
		newTabBundle[1].Visible = true
	end
end

local function resolveGuiParent()
	local ok, _ = pcall(function()
		return Services.CoreGui:FindFirstChild(_CONFIGS.UI_NAME)
	end)
	if ok then
		return Services.CoreGui
	else
		local plr = Players.LocalPlayer or Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
		return plr:WaitForChild("PlayerGui")
	end
end

local parentGui = resolveGuiParent()
local existed = parentGui:FindFirstChild(_CONFIGS.UI_NAME)
if existed then existed:Destroy() end

local Screen = New("ScreenGui")
Screen.Name = _CONFIGS.UI_NAME
Screen.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
Screen.ResetOnSpawn = false

pcall(function()
	if syn and syn.protect_gui then
		syn.protect_gui(Screen)
	end
end)

Screen.Parent = parentGui

local function makeDraggable(dragHandle: GuiObject, target: GuiObject)
	local dragging = false
	local dragStart
	local startPos
	dragHandle.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = target.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	UserInputService.InputChanged:Connect(function(input)
		if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			local delta = input.Position - dragStart
			target.Position = UDim2.new(
				startPos.X.Scale, startPos.X.Offset + delta.X,
				startPos.Y.Scale, startPos.Y.Offset + delta.Y
			)
		end
	end)
end

local Main = New("Frame")
Main.Name = "Main"
Main.Parent = Screen
Main.BackgroundColor3 = THEME.MAIN
Main.BorderSizePixel = 0
Main.Position = dn(0.5, 0, 0.5, 0)
Main.Size = dn(0, 448, 0, 280)
Main.AnchorPoint = Vector2.new(0.5, 0.5)

local MainCorner = New("UICorner")
MainCorner.CornerRadius = R.big
MainCorner.Parent = Main

local Title = New("TextLabel")
Title.Parent = Main
Title.BackgroundColor3 = THEME.SURFACE.TITLEBAR
Title.BorderSizePixel = 0
Title.Position = dn(0, 6, 0, 6)
Title.Size = dn(0, 436, 0, 24)
Title.Font = Enum.Font.GothamBold
Title.Text = "  " .. _CONFIGS.UI_NAME
Title.TextColor3 = THEME.TEXT
Title.TextSize = 14
Title.TextXAlignment = Enum.TextXAlignment.Left

local TitleCorner = New("UICorner")
TitleCorner.CornerRadius = R.big
TitleCorner.Parent = Title

local OpenBtn = New("TextButton")
OpenBtn.Name = "Open"
OpenBtn.Parent = Screen
OpenBtn.BackgroundColor3 = THEME.MAIN
OpenBtn.Position = dn(0.85, 0, 0.05, 0)
OpenBtn.BorderSizePixel = 2
OpenBtn.BorderColor3 = THEME.BORDER
OpenBtn.Size = dn(0, 55, 0, 25)
OpenBtn.Font = Enum.Font.SourceSans
OpenBtn.Text = "隐藏"
OpenBtn.TextColor3 = THEME.TEXT
OpenBtn.TextSize = 14

makeDraggable(OpenBtn, OpenBtn)
makeDraggable(Title, Main)

local TOGGLE = true
OpenBtn.MouseButton1Click:Connect(function()
	TOGGLE = not TOGGLE
	Main.Visible = TOGGLE
	OpenBtn.Text = (TOGGLE and "隐藏" or "打开")
end)

local Sidebar = New("Frame")
Sidebar.Name = "Sidebar"
Sidebar.Parent = Main
Sidebar.BackgroundColor3 = THEME.SURFACE.SIDEBAR
Sidebar.BorderSizePixel = 0
Sidebar.Position = dn(0, 6, 0, 36)
Sidebar.Size = dn(0, 106, 0, 238)

local SidebarCorner = New("UICorner")
SidebarCorner.CornerRadius = R.big
SidebarCorner.Parent = Sidebar

local TabButtons = New("ScrollingFrame")
TabButtons.Name = "TabButtons"
TabButtons.Parent = Sidebar
TabButtons.Active = true
TabButtons.BackgroundTransparency = 1
TabButtons.BorderSizePixel = 0
TabButtons.Size = dn(0, 106, 0, 238)
TabButtons.ScrollBarThickness = 0

local TabButtonsLayout = New("UIListLayout")
TabButtonsLayout.Parent = TabButtons
TabButtonsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
TabButtonsLayout.SortOrder = Enum.SortOrder.LayoutOrder
TabButtonsLayout.Padding = dm(0, 5)

local TabButtonsPadding = New("UIPadding")
TabButtonsPadding.Parent = TabButtons
TabButtonsPadding.PaddingTop = dm(0, 6)

TabButtonsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
	TabButtons.CanvasSize = dn(0, 0, 0, TabButtonsLayout.AbsoluteContentSize.Y + 12)
end)

local TabHolder = New("Frame")
TabHolder.Name = "TabHolder"
TabHolder.Parent = Main
TabHolder.BackgroundColor3 = THEME.SURFACE.PANEL
TabHolder.BorderSizePixel = 0
TabHolder.Position = dn(0, 118, 0, 36)
TabHolder.Size = dn(0, 324, 0, 238)

local TabHolderCorner = New("UICorner")
TabHolderCorner.CornerRadius = R.big
TabHolderCorner.Parent = TabHolder

local notificationHolder
local notifAmount = 0
local removedPos = nil

local function createBaseNotifications()
	local pg = Players.LocalPlayer:WaitForChild("PlayerGui")
	local exist = pg:FindFirstChild("NotificationHolder")
	if exist then
		return exist
	end

	local ScreenGui = New("ScreenGui")
	ScreenGui.Name = "NotificationHolder"
	ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	ScreenGui.ResetOnSpawn = false

	local ToggleNotif = New("Frame")
	ToggleNotif.Name = "ToggleNotif"
	ToggleNotif.ZIndex = 5
	ToggleNotif.AnchorPoint = Vector2.new(1, 1)
	ToggleNotif.Visible = false
	ToggleNotif.Size = UDim2.new(0, 291, 0, 56)
	ToggleNotif.Position = UDim2.new(1, 0, 1, 0)
	ToggleNotif.BackgroundColor3 = THEME.SECTION
	ToggleNotif.Parent = ScreenGui

	local UiCorner = New("UICorner")
	UiCorner.Name = "UiCorner"
	UiCorner.CornerRadius = R.big
	UiCorner.Parent = ToggleNotif

	local Stroke = New("UIStroke")
	Stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	Stroke.Transparency = 0.4
	Stroke.Thickness = 1
	Stroke.Color = THEME.BORDER
	Stroke.Parent = ToggleNotif

	local SepVertical = New("Frame")
	SepVertical.Name = "SepVertical"
	SepVertical.Size = UDim2.new(0, 2, 0, 56)
	SepVertical.BackgroundTransparency = 0.5
	SepVertical.Position = UDim2.new(0.7423077, 0, 0, 0)
	SepVertical.BorderSizePixel = 0
	SepVertical.BackgroundColor3 = THEME.BORDER
	SepVertical.Parent = ToggleNotif

	local SepHorizontal = New("Frame")
	SepHorizontal.Name = "SepHorizontal"
	SepHorizontal.Size = UDim2.new(0, 72, 0, 2)
	SepHorizontal.BackgroundTransparency = 0.5
	SepHorizontal.Position = UDim2.new(0.75, 0, 0.4464286, 2)
	SepHorizontal.BorderSizePixel = 0
	SepHorizontal.BackgroundColor3 = THEME.BORDER
	SepHorizontal.Parent = ToggleNotif

	local Title = New("TextLabel")
	Title.Name = "Title"
	Title.Size = UDim2.new(0, 216, 0, 19)
	Title.BackgroundTransparency = 1
	Title.TextSize = 14
	Title.TextColor3 = THEME.TEXT
	Title.Font = Enum.Font.SourceSans
	Title.Parent = ToggleNotif

	local Paragraph = New("TextLabel")
	Paragraph.Name = "Paragraph"
	Paragraph.Size = UDim2.new(0, 218, 0, 37)
	Paragraph.BackgroundTransparency = 1
	Paragraph.Position = UDim2.new(0, 0, 0.3392857, 0)
	Paragraph.TextSize = 14
	Paragraph.TextColor3 = THEME.TEXT
	Paragraph.Text = ""
	Paragraph.TextYAlignment = Enum.TextYAlignment.Top
	Paragraph.TextWrapped = true
	Paragraph.Font = Enum.Font.SourceSans
	Paragraph.TextXAlignment = Enum.TextXAlignment.Left
	Paragraph.Parent = ToggleNotif

	local PPad = New("UIPadding")
	PPad.PaddingLeft = UDim.new(0, 10)
	PPad.PaddingRight = UDim.new(0, 5)
	PPad.Parent = Paragraph

	local TrueBtn = New("TextButton")
	TrueBtn.Name = "True"
	TrueBtn.Size = UDim2.new(0, 72, 0, 27)
	TrueBtn.BackgroundTransparency = 1
	TrueBtn.Position = UDim2.new(0.75, 0, 0, 0)
	TrueBtn.TextSize = 14
	TrueBtn.TextColor3 = THEME.ACCENT
	TrueBtn.Text = "Yes"
	TrueBtn.Font = Enum.Font.SourceSans
	TrueBtn.Parent = ToggleNotif

	local FalseBtn = New("TextButton")
	FalseBtn.Name = "False"
	FalseBtn.Size = UDim2.new(0, 72, 0, 27)
	FalseBtn.BackgroundTransparency = 1
	FalseBtn.Position = UDim2.new(0.75, 0, 0.5178571, 0)
	FalseBtn.TextSize = 14
	FalseBtn.TextColor3 = THEME.BAD
	FalseBtn.Text = "No"
	FalseBtn.Font = Enum.Font.SourceSans
	FalseBtn.Parent = ToggleNotif

	local DefaultNotif = New("Frame")
	DefaultNotif.Name = "DefaultNotif"
	DefaultNotif.ZIndex = 5
	DefaultNotif.AnchorPoint = Vector2.new(1, 1)
	DefaultNotif.Visible = false
	DefaultNotif.Size = UDim2.new(0, 291, 0, 56)
	DefaultNotif.Position = UDim2.new(1, 0, 1, 0)
	DefaultNotif.BackgroundColor3 = THEME.SECTION
	DefaultNotif.Parent = ScreenGui

	local DCorner = New("UICorner")
	DCorner.CornerRadius = R.big
	DCorner.Parent = DefaultNotif

	local DStroke = New("UIStroke")
	DStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	DStroke.Transparency = 0.4
	DStroke.Thickness = 1
	DStroke.Color = THEME.BORDER
	DStroke.Parent = DefaultNotif

	local DTitle = New("TextLabel")
	DTitle.Name = "Title"
	DTitle.Size = UDim2.new(0, 291, 0, 19)
	DTitle.BackgroundTransparency = 1
	DTitle.TextSize = 14
	DTitle.TextColor3 = THEME.TEXT
	DTitle.Font = Enum.Font.SourceSans
	DTitle.Parent = DefaultNotif

	local DPara = New("TextLabel")
	DPara.Name = "Paragraph"
	DPara.Size = UDim2.new(0, 291, 0, 37)
	DPara.BackgroundTransparency = 1
	DPara.Position = UDim2.new(0, 0, 0.3392857, 0)
	DPara.TextSize = 14
	DPara.TextColor3 = THEME.TEXT
	DPara.Text = ""
	DPara.TextYAlignment = Enum.TextYAlignment.Top
	DPara.TextWrapped = true
	DPara.Font = Enum.Font.SourceSans
	DPara.TextXAlignment = Enum.TextXAlignment.Left
	DPara.Parent = DefaultNotif

	local DPad = New("UIPadding")
	DPad.PaddingLeft = UDim.new(0, 10)
	DPad.PaddingRight = UDim.new(0, 5)
	DPad.Parent = DPara

	ScreenGui.Parent = pg
	return ScreenGui
end

notificationHolder = createBaseNotifications()

function library:SelectNotify(args)
	args = args or {}
	args.TweenSpeed = args.TweenSpeed or 1
	args.TweenInSpeed = args.TweenInSpeed or args.TweenSpeed
	args.TweenOutSpeed = args.TweenOutSpeed or args.TweenSpeed
	args.TweenVerticalSpeed = args.TweenVerticalSpeed or args.TweenSpeed
	args.Title = args.Title or "Title"
	args.Text = args.Text or "Text"
	args.TrueText = args.TrueText or "Yes"
	args.FalseText = args.FalseText or "No"
	args.Duration = args.Duration or 5
	args.Callback = args.Callback or function() warn("No callback for notif") end

	notifAmount += 1
	local track = notifAmount
	local notifNum = notifAmount
	local doesExist = true
	local removed = false

	local notif = notificationHolder.ToggleNotif:Clone()
	notif.Parent = notificationHolder
	notif.Visible = true
	notif.Position = UDim2.new(1, 300, 1, -5)
	notif.Transparency = 0.05
	notif.True.Text = args.TrueText
	notif.False.Text = args.FalseText
	notif.Paragraph.Text = args.Text
	notif.Title.Text = args.Title

	tween:Create(notif, { Position = UDim2.new(1, -5, 1, -5) }, args.TweenInSpeed, "Quint", "Out"):Play()

	task.spawn(function()
		task.wait(args.Duration + args.TweenInSpeed)
		doesExist = false
	end)

	notif.True.MouseButton1Click:Connect(function()
		doesExist = false
		removed = true
		notifAmount -= 1
		removedPos = notif.Position.Y.Offset
		pcall(args.Callback, true)
	end)
	notif.False.MouseButton1Click:Connect(function()
		doesExist = false
		removed = true
		notifAmount -= 1
		removedPos = notif.Position.Y.Offset
		pcall(args.Callback, false)
	end)

	task.spawn(function()
		local originalPos = notif.Position
		while doesExist and task.wait() do
			local pos = notif.Position
			if notifAmount > track then
				tween:Create(notif, { Position = UDim2.new(1, -5, 1, originalPos.Y.Offset - (65 * (notifAmount - notifNum))) }, args.TweenVerticalSpeed, "Quint", "Out"):Play()
				track += 1
			end
			if notifAmount < track then
				if removedPos and removedPos > pos.Y.Offset then
					tween:Create(notif, { Position = UDim2.new(1, -5, 1, originalPos.Y.Offset - (65 * (notifAmount - notifNum))) }, args.TweenVerticalSpeed, "Quint", "Out"):Play()
				else
					notifNum -= 1
				end
				track -= 1
			end
		end
		local pos = notif.Position
		if not removed then
			notifAmount -= 1
			removedPos = pos.Y.Offset
		end
		tween:Create(notif, { Position = UDim2.new(1, 300, 1, pos.Y.Offset) }, args.TweenOutSpeed, "Quint", "Out"):Play()
		task.wait(args.TweenOutSpeed)
		notif:Destroy()
	end)
end

function library:Notify(args)
	args = args or {}
	args.TweenSpeed = args.TweenSpeed or 1
	args.TweenInSpeed = args.TweenInSpeed or args.TweenSpeed
	args.TweenOutSpeed = args.TweenOutSpeed or args.TweenSpeed
	args.TweenVerticalSpeed = args.TweenVerticalSpeed or args.TweenSpeed
	args.Title = args.Title or "Title"
	args.Text = args.Text or "Text"
	args.Duration = args.Duration or 5

	notifAmount += 1
	local track = notifAmount
	local notifNum = notifAmount
	local doesExist = true
	local removed = false

	local notif = notificationHolder.DefaultNotif:Clone()
	notif.Parent = notificationHolder
	notif.Visible = true
	notif.Position = UDim2.new(1, 300, 1, -5)
	notif.Transparency = 0.05
	notif.Paragraph.Text = args.Text
	notif.Title.Text = args.Title

	notif.InputBegan:Connect(function(InputObject)
		if InputObject.UserInputType == Enum.UserInputType.MouseButton1 then
			tween:Create(notif, { Transparency = 0.8 }, 0.5, "Linear", "Out"):Play()
			doesExist = false
			removed = true
			notifAmount -= 1
			removedPos = notif.Position.Y.Offset
		end
	end)

	tween:Create(notif, { Position = UDim2.new(1, -5, 1, -5) }, args.TweenInSpeed, "Quint", "Out"):Play()

	task.spawn(function()
		task.wait(args.Duration + args.TweenInSpeed)
		doesExist = false
	end)

	task.spawn(function()
		local originalPos = notif.Position
		while doesExist and task.wait() do
			local pos = notif.Position
			if notifAmount > track then
				tween:Create(notif, { Position = UDim2.new(1, -5, 1, originalPos.Y.Offset - (65 * (notifAmount - notifNum))) }, args.TweenVerticalSpeed, "Quint", "Out"):Play()
				track += 1
			end
			if notifAmount < track then
				if removedPos and removedPos > pos.Y.Offset then
					tween:Create(notif, { Position = UDim2.new(1, -5, 1, originalPos.Y.Offset - (65 * (notifAmount - notifNum))) }, args.TweenVerticalSpeed, "Quint", "Out"):Play()
				else
					notifNum -= 1
				end
				track -= 1
			end
		end
		local pos = notif.Position
		if not removed then
			notifAmount -= 1
			removedPos = notif.Position.Y.Offset
		end
		tween:Create(notif, { Position = UDim2.new(1, 300, 1, pos.Y.Offset) }, args.TweenOutSpeed, "Quint", "Out"):Play()
		task.wait(args.TweenOutSpeed)
		notif:Destroy()
	end)
end

function library:CreateTab(tabName: string)
	local TabButton = New("TextButton")
	local TabButtonCorner = New("UICorner")
	local Glow = New("Frame")
	local GlowCorner = New("UICorner")
	local GlowGradient = New("UIGradient")
	local Tab = New("ScrollingFrame")
	local TabPadding = New("UIPadding")
	local TabLayout = New("UIListLayout")

	TabButton.Name = "TabButton"
	TabButton.Parent = TabButtons
	TabButton.BackgroundColor3 = THEME.SECTION
	TabButton.BorderSizePixel = 0
	TabButton.Size = dn(0, 94, 0, 28)
	TabButton.AutoButtonColor = false
	TabButton.Font = Enum.Font.GothamSemibold
	TabButton.Text = tabName
	TabButton.TextColor3 = THEME.TEXT
	TabButton.TextSize = 14

	TabButtonCorner.CornerRadius = R.big
	TabButtonCorner.Parent = TabButton

	Glow.Name = "Glow"
	Glow.Parent = TabButton
	Glow.BackgroundColor3 = THEME.SECTION
	Glow.BorderSizePixel = 0
	Glow.Position = dn(0, 0, 0.928571463, 0)
	Glow.Size = dn(0, 94, 0, 2)
	Glow.Transparency = 1

	GlowCorner.CornerRadius = R.big
	GlowCorner.Parent = Glow

	GlowGradient.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0.0, THEME.GL1),
		ColorSequenceKeypoint.new(0.5, THEME.GL2),
		ColorSequenceKeypoint.new(1.0, THEME.GL1)
	}
	GlowGradient.Parent = Glow

	Tab.Name = "Tab"
	Tab.Parent = TabHolder
	Tab.Active = true
	Tab.BackgroundTransparency = 1
	Tab.BorderSizePixel = 0
	Tab.Size = dn(0, 324, 0, 238)
	Tab.ScrollBarThickness = 0
	Tab.Visible = false

	if library.currentTab == nil then
		library.currentTab = { Tab, TabButton }
		Glow.Transparency = 0
		Tab.Visible = true
	end

	TabPadding.Name = "TabPadding"
	TabPadding.Parent = Tab
	TabPadding.PaddingTop = dm(0, 6)

	TabLayout.Name = "TabLayout"
	TabLayout.Parent = Tab
	TabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
	TabLayout.Padding = dm(0, 5)
	TabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		Tab.CanvasSize = dn(0, 0, 0, TabLayout.AbsoluteContentSize.Y + 12)
	end)

	TabButton.MouseButton1Click:Connect(function()
		tween:SwitchTab({ Tab, TabButton })
	end)

	local API = {}

	function API:NewSeparator()
		local Sep = New("Frame")
		Sep.Transparency = 1
		Sep.Size = dn(0, 0, 0, 0)
		Sep.BorderSizePixel = 0
		Sep.Parent = Tab
	end

	function API:NewButton(text, callback)
		callback = callback or noop
		local Btn = New("TextButton")
		local Corner = New("UICorner")
		Btn.Name = "BtnModule"
		Btn.Parent = Tab
		Btn.BackgroundColor3 = THEME.SECTION
		Btn.BorderSizePixel = 0
		Btn.Size = dn(0, 312, 0, 28)
		Btn.AutoButtonColor = false
		Btn.Font = Enum.Font.GothamSemibold
		Btn.Text = "  " .. tostring(text)
		Btn.TextColor3 = THEME.TEXT
		Btn.TextSize = 14
		Btn.TextXAlignment = Enum.TextXAlignment.Left
		Corner.CornerRadius = R.big
		Corner.Parent = Btn
		Btn.MouseButton1Click:Connect(callback)
	end

	function API:NewToggle(label, key, default, callback)
		callback = callback or noop
		default = default or false
		key = key or label

		local Row = New("TextButton")
		local RowCorner = New("UICorner")
		local OffStatus = New("Frame")
		local OffGrad = New("UIGradient")
		local OffCorner = New("UICorner")
		local OnStatus = New("Frame")
		local OnCorner = New("UICorner")
		local OnGrad = New("UIGradient")

		library.flags[key] = {
			State = false,
			Callback = callback,
			SetState = function(self, state)
				local v = (state ~= nil) and state or (not library.flags:GetState(key))
				library.flags[key].State = v
				task.spawn(function()
					pcall(library.flags[key].Callback, v)
				end)
				tween:Create(OffStatus, { Transparency = v and 1 or 0 }, 0.2, "Sine", "Out"):Play()
				tween:Create(OnStatus, { Transparency = v and 0 or 1, BackgroundTransparency = v and 0 or 1 }, 0.2, "Sine", "Out"):Play()
			end
		}

		Row.Name = "ToggleModule"
		Row.Parent = Tab
		Row.BackgroundColor3 = THEME.SECTION
		Row.BorderSizePixel = 0
		Row.Size = dn(0, 312, 0, 28)
		Row.AutoButtonColor = false
		Row.Font = Enum.Font.GothamSemibold
		Row.Text = "  " .. tostring(label)
		Row.TextColor3 = THEME.TEXT
		Row.TextSize = 14
		Row.TextXAlignment = Enum.TextXAlignment.Left

		RowCorner.CornerRadius = R.big
		RowCorner.Parent = Row

		OffStatus.Name = "OffStatus"
		OffStatus.Parent = Row
		OffStatus.BackgroundColor3 = THEME.SECTION
		OffStatus.BorderSizePixel = 0
		OffStatus.Position = dn(0.878205061, 0, 0.178571433, 0)
		OffStatus.Size = dn(0, 34, 0, 18)
		OffGrad.Color = ColorSequence.new{
			ColorSequenceKeypoint.new(0.0, THEME.CONTROL.TOGGLE_OFF_START),
			ColorSequenceKeypoint.new(0.5, THEME.CONTROL.TOGGLE_OFF_START),
			ColorSequenceKeypoint.new(1.0, THEME.CONTROL.TOGGLE_OFF_END)
		}
		OffGrad.Parent = OffStatus
		OffCorner.CornerRadius = R.small
		OffCorner.Parent = OffStatus

		OnStatus.Name = "OnStatus"
		OnStatus.Parent = Row
		OnStatus.BackgroundColor3 = THEME.SECTION
		OnStatus.BackgroundTransparency = 1
		OnStatus.BorderSizePixel = 0
		OnStatus.Position = dn(0.878205121, 0, 0.178571433, 0)
		OnStatus.Size = dn(0, 34, 0, 18)
		OnStatus.Transparency = 1
		OnCorner.CornerRadius = R.small
		OnCorner.Parent = OnStatus
		OnGrad.Color = ColorSequence.new{
			ColorSequenceKeypoint.new(0.0, THEME.CONTROL.TOGGLE_ON_START),
			ColorSequenceKeypoint.new(1.0, THEME.CONTROL.TOGGLE_ON_END)
		}
		OnGrad.Parent = OnStatus

		Row.MouseButton1Click:Connect(function()
			library.flags[key]:SetState()
		end)
		if default then
			library.flags[key]:SetState(default)
		end
	end

	function API:NewBind(label, defaultKeyName, callback)
		callback = callback or noop
		local invalidKey = { Return=true, Space=true, Tab=true, Backquote=true, CapsLock=true, Escape=true, Unknown=true }
		local alias = {
			RightControl="Right Ctrl", LeftControl="Left Ctrl", LeftShift="Left Shift", RightShift="Right Shift",
			Semicolon=";", Quote='"', LeftBracket="[", RightBracket="]", Equals="=", Minus="-",
			RightAlt="Right Alt", LeftAlt="Left Alt"
		}

		local currentKey = Enum.KeyCode[(defaultKeyName or "None")] or nil
		local display = currentKey and (alias[currentKey.Name] or currentKey.Name) or "None"

		local Row = New("TextButton")
		local RowCorner = New("UICorner")
		local Value = New("TextButton")
		local ValueCorner = New("UICorner")

		Row.Name = "KeybindModule"
		Row.Parent = Tab
		Row.BackgroundColor3 = THEME.SECTION
		Row.BorderSizePixel = 0
		Row.Size = dn(0, 312, 0, 28)
		Row.AutoButtonColor = false
		Row.Font = Enum.Font.GothamSemibold
		Row.Text = "  " .. tostring(label)
		Row.TextColor3 = THEME.TEXT
		Row.TextSize = 14
		Row.TextXAlignment = Enum.TextXAlignment.Left
		RowCorner.CornerRadius = R.big
		RowCorner.Parent = Row

		Value.Name = "KeybindValue"
		Value.Parent = Row
		Value.BackgroundColor3 = THEME.CONTROL.INPUT_BG
		Value.BorderSizePixel = 0
		Value.Position = dn(0.75, 0, 0.178571433, 0)
		Value.Size = dn(0, 74, 0, 18)
		Value.AutoButtonColor = false
		Value.Font = Enum.Font.Gotham
		Value.Text = display
		Value.TextColor3 = THEME.TEXT
		Value.TextSize = 12
		ValueCorner.CornerRadius = R.small
		ValueCorner.Parent = Value

		UserInputService.InputBegan:Connect(function(input, gpe)
			if gpe then return end
			if input.UserInputType ~= Enum.UserInputType.Keyboard then return end
			if currentKey and input.KeyCode == currentKey then
				pcall(callback, currentKey.Name)
			end
		end)

		Value.MouseButton1Click:Connect(function()
			Value.Text = "..."
			local input = UserInputService.InputEnded:Wait()
			if input.UserInputType ~= Enum.UserInputType.Keyboard then
				Value.Text = display
				return
			end
			local keyName = input.KeyCode.Name
			if invalidKey[keyName] then
				Value.Text = display
				return
			end
			currentKey = Enum.KeyCode[keyName]
			display = alias[keyName] or keyName
			Value.Text = display
		end)
	end

	function API:NewSlider(label, key, defaultValue, minValue, maxValue, allowFloat, callback)
		callback = callback or noop
		defaultValue = (defaultValue ~= nil) and defaultValue or minValue

		local Row = New("TextButton")
		local RowCorner = New("UICorner")
		local Bar = New("Frame")
		local BarCorner = New("UICorner")
		local Fill = New("Frame")
		local FillCorner = New("UICorner")
		local ValueBox = New("TextBox")
		local ValueCorner = New("UICorner")
		local BtnAdd = New("TextButton")
		local BtnSub = New("TextButton")

		library.flags[key] = {
			State = defaultValue,
			SetValue = function(self, newVal)
				local mouseX = UserInputService:GetMouseLocation().X
				local ratio
				if typeof(newVal) == "number" then
					ratio = (newVal - minValue) / (maxValue - minValue)
				else
					ratio = (mouseX - Bar.AbsolutePosition.X) / Bar.AbsoluteSize.X
				end
				ratio = math.clamp(ratio, 0, 1)
				local val = minValue + (maxValue - minValue) * ratio
				if not allowFloat then
					val = math.floor(val + 0.5)
				else
					val = tonumber(string.format("%.1f", val))
				end
				library.flags[key].State = val
				ValueBox.Text = tostring(val)
				Fill.Size = dn(ratio, 0, 1, 0)
				pcall(callback, val)
			end
		}

		Row.Name = "SliderModule"
		Row.Parent = Tab
		Row.BackgroundColor3 = THEME.SECTION
		Row.BorderSizePixel = 0
		Row.Size = dn(0, 312, 0, 28)
		Row.AutoButtonColor = false
		Row.Font = Enum.Font.GothamSemibold
		Row.Text = "  " .. tostring(label)
		Row.TextColor3 = THEME.TEXT
		Row.TextSize = 14
		Row.TextXAlignment = Enum.TextXAlignment.Left
		RowCorner.CornerRadius = R.big
		RowCorner.Parent = Row

		Bar.Name = "SliderBar"
		Bar.Parent = Row
		Bar.BackgroundColor3 = THEME.BAR
		Bar.BorderSizePixel = 0
		Bar.Position = dn(0.442307681, 0, 0.392857134, 0)
		Bar.Size = dn(0, 108, 0, 6)
		BarCorner.CornerRadius = R.small
		BarCorner.Parent = Bar

		Fill.Name = "SliderPart"
		Fill.Parent = Bar
		Fill.BackgroundColor3 = THEME.ACCENT
		Fill.BorderSizePixel = 0
		Fill.Size = dn(0, 0, 0, 6)
		FillCorner.CornerRadius = R.small
		FillCorner.Parent = Fill

		ValueBox.Name = "SliderValue"
		ValueBox.Parent = Row
		ValueBox.BackgroundColor3 = THEME.INPUT
		ValueBox.BorderSizePixel = 0
		ValueBox.Position = dn(0.884615362, 0, 0.178571433, 0)
		ValueBox.Size = dn(0, 32, 0, 18)
		ValueBox.Font = Enum.Font.Gotham
		ValueBox.Text = tostring(defaultValue)
		ValueBox.TextColor3 = THEME.TEXT
		ValueBox.TextSize = 12
		ValueCorner.CornerRadius = R.small
		ValueCorner.Parent = ValueBox

		BtnAdd.Name = "AddSlider"
		BtnAdd.Parent = Row
		BtnAdd.BackgroundTransparency = 1
		BtnAdd.BorderSizePixel = 0
		BtnAdd.Position = dn(0.807692289, 0, 0.178571433, 0)
		BtnAdd.Size = dn(0, 18, 0, 18)
		BtnAdd.Font = Enum.Font.Gotham
		BtnAdd.Text = "+"
		BtnAdd.TextColor3 = THEME.TEXT
		BtnAdd.TextSize = 18

		BtnSub.Name = "MinusSlider"
		BtnSub.Parent = Row
		BtnSub.BackgroundTransparency = 1
		BtnSub.BorderSizePixel = 0
		BtnSub.Position = dn(0.365384609, 0, 0.178571433, 0)
		BtnSub.Size = dn(0, 18, 0, 18)
		BtnSub.Font = Enum.Font.Gotham
		BtnSub.Text = "-"
		BtnSub.TextColor3 = THEME.TEXT
		BtnSub.TextSize = 18

		BtnSub.MouseButton1Click:Connect(function()
			local v = (library.flags:GetState(key) or defaultValue) - 1
			v = math.clamp(v, minValue, maxValue)
			library.flags[key]:SetValue(v)
		end)
		BtnAdd.MouseButton1Click:Connect(function()
			local v = (library.flags:GetState(key) or defaultValue) + 1
			v = math.clamp(v, minValue, maxValue)
			library.flags[key]:SetValue(v)
		end)

		library.flags[key]:SetValue(defaultValue)

		local dragging = false
		Bar.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				library.flags[key]:SetValue()
				dragging = true
				input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						dragging = false
					end
				end)
			end
		end)
		UserInputService.InputChanged:Connect(function(input)
			if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
				library.flags[key]:SetValue()
			end
		end)

		local editing = false
		ValueBox.Focused:Connect(function()
			editing = true
		end)
		ValueBox.FocusLost:Connect(function(enterPressed)
			editing = false
			if not enterPressed then return end
			local n = tonumber(ValueBox.Text)
			if not n then
				ValueBox.Text = tostring(library.flags:GetState(key))
				return
			end
			n = math.clamp(n, minValue, maxValue)
			library.flags[key]:SetValue(n)
		end)
		ValueBox:GetPropertyChangedSignal("Text"):Connect(function()
			if not editing then return end
			if allowFloat then
				local cleaned = ValueBox.Text:gsub("[^%d%.%-]", "")
				local firstMinus = cleaned:find("%-")
				if firstMinus and firstMinus > 1 then
					cleaned = cleaned:gsub("%-", "")
				end
				local firstDot = cleaned:find("%.")
				if firstDot then
					local before = cleaned:sub(1, firstDot)
					local after = cleaned:sub(firstDot + 1):gsub("%.", "")
					cleaned = before .. after
				end
				ValueBox.Text = cleaned
			else
				ValueBox.Text = ValueBox.Text:gsub("%D+", "")
			end
		end)
	end

	function API:NewDropdown(label, key, options, callback)
		callback = callback or noop
		options = options or {}
		key = key or label

		library.flags[key] = { State = options[1] }

		local Row = New("TextButton")
		local RowCorner = New("UICorner")
		local Input = New("TextBox")
		local ToggleBtn = New("TextButton")
		local Drop = New("TextButton")
		local DropCorner = New("UICorner")
		local DropLayout = New("UIListLayout")
		local DropPad = New("UIPadding")

		Row.Name = "DropdownModule"
		Row.Parent = Tab
		Row.BackgroundColor3 = THEME.SECTION
		Row.BorderSizePixel = 0
		Row.Size = dn(0, 312, 0, 28)
		Row.AutoButtonColor = false
		Row.Font = Enum.Font.GothamSemibold
		Row.Text = ""
		Row.TextColor3 = THEME.TEXT
		Row.TextSize = 14
		Row.TextXAlignment = Enum.TextXAlignment.Left

		RowCorner.CornerRadius = R.big
		RowCorner.Parent = Row

		Input.Name = "DropdownText"
		Input.Parent = Row
		Input.BackgroundTransparency = 1
		Input.Position = dn(0.025641026, 0, 0, 0)
		Input.Size = dn(0, 192, 0, 28)
		Input.Font = Enum.Font.GothamSemibold
		Input.PlaceholderText = tostring(label)
		Input.PlaceholderColor3 = THEME.SUBTEXT
		Input.TextColor3 = THEME.TEXT
		Input.TextSize = 14
		Input.TextXAlignment = Enum.TextXAlignment.Left
		Input.Text = ""

		ToggleBtn.Name = "OpenDropdown"
		ToggleBtn.Parent = Row
		ToggleBtn.BackgroundTransparency = 1
		ToggleBtn.BorderSizePixel = 0
		ToggleBtn.Position = dn(0.907051265, 0, 0.178571433, 0)
		ToggleBtn.Size = dn(0, 18, 0, 18)
		ToggleBtn.Font = Enum.Font.Gotham
		ToggleBtn.Text = "+"
		ToggleBtn.TextColor3 = THEME.TEXT
		ToggleBtn.TextSize = 22

		Drop.Name = "DropdownBottom"
		Drop.Parent = Tab
		Drop.BackgroundColor3 = THEME.SECTION
		Drop.BorderSizePixel = 0
		Drop.ClipsDescendants = true
		Drop.Size = dn(0, 312, 0, 0)
		Drop.AutoButtonColor = false
		Drop.Font = Enum.Font.GothamSemibold
		Drop.Text = ""
		Drop.TextColor3 = THEME.TEXT
		Drop.TextSize = 14
		Drop.TextXAlignment = Enum.TextXAlignment.Left
		Drop.Visible = false

		DropCorner.CornerRadius = R.big
		DropCorner.Parent = Drop

		DropLayout.Parent = Drop
		DropLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
		DropLayout.SortOrder = Enum.SortOrder.LayoutOrder
		DropLayout.Padding = dm(0, 6)

		DropPad.Parent = Drop
		DropPad.PaddingTop = dm(0, 6)

		local open = false
		local function filterByText()
			local NewValue = Input.Text
			for _, Element in next, Drop:GetChildren() do
				if Element:IsA("TextButton") then
					Element.Visible = string.find(Element.Name:lower(), NewValue:lower()) ~= nil
				end
			end
		end
		local function toggleDropdown()
			open = not open
			if open then
				Drop.Visible = true
				filterByText()
			else
				task.spawn(function()
					task.wait(0.35)
					Drop.Visible = false
				end)
			end
			ToggleBtn.Text = open and "-" or "+"
			local targetSize = open and (DropLayout.AbsoluteContentSize.Y + 12) or 0
			tween:Create(Drop, { Size = dn(0, 312, 0, targetSize) }, 0.35, "Sine", "Out"):Play()
		end

		DropLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
			if not open then return end
			tween:Create(Drop, { Size = dn(0, 312, 0, DropLayout.AbsoluteContentSize.Y + 12) }, 0.1, "Sine", "Out"):Play()
		end)

		ToggleBtn.MouseButton1Click:Connect(toggleDropdown)
		Input.Focused:Connect(function()
			if open then return end
			toggleDropdown()
		end)
		Input:GetPropertyChangedSignal("Text"):Connect(filterByText)

		library.flags[key].SetOptions = function(self, list)
			library.flags[key]:ClearOptions()
			for _, opt in ipairs(list) do
				library.flags[key]:AddOption(opt)
			end
		end
		library.flags[key].ClearOptions = function(self)
			for _, child in ipairs(Drop:GetChildren()) do
				if child:IsA("TextButton") then child:Destroy() end
			end
		end
		library.flags[key].AddOption = function(self, opt)
			local Btn = New("TextButton")
			local BtnCorner = New("UICorner")
			Btn.Name = tostring(opt)
			Btn.Parent = Drop
			Btn.BackgroundColor3 = THEME.CONTROL.DROPDOWN_ITEM_BG
			Btn.BorderSizePixel = 0
			Btn.Size = dn(0, 300, 0, 28)
			Btn.AutoButtonColor = false
			Btn.Font = Enum.Font.GothamSemibold
			Btn.Text = tostring(opt)
			Btn.TextColor3 = THEME.TEXT
			Btn.TextSize = 14

			BtnCorner.CornerRadius = R.big
			BtnCorner.Parent = Btn

			Btn.MouseButton1Click:Connect(function()
				Input.PlaceholderText = tostring(opt)
				Input.Text = ""
				library.flags[key].State = tostring(opt)
				task.spawn(toggleDropdown)
				pcall(callback, tostring(opt))
			end)
		end
		library.flags[key].RemoveOption = function(self, opt)
			local child = Drop:FindFirstChild(tostring(opt))
			if child then
				child:Destroy()
			end
		end
		library.flags[key]:SetOptions(options)
	end

	function API:NewBox(label, placeholder, callback)
		callback = callback or noop

		local Row = New("TextButton")
		local RowCorner = New("UICorner")
		local Box = New("TextBox")
		local BoxCorner = New("UICorner")

		Row.Name = "BoxModule"
		Row.Parent = Tab
		Row.BackgroundColor3 = THEME.SECTION
		Row.BorderSizePixel = 0
		Row.Size = dn(0, 312, 0, 28)
		Row.AutoButtonColor = false
		Row.Font = Enum.Font.GothamSemibold
		Row.Text = "  " .. tostring(label)
		Row.TextColor3 = THEME.TEXT
		Row.TextSize = 14
		Row.TextXAlignment = Enum.TextXAlignment.Left

		RowCorner.CornerRadius = R.big
		RowCorner.Parent = Row

		Box.Name = "Box"
		Box.Parent = Row
		Box.BackgroundColor3 = THEME.INPUT
		Box.BorderSizePixel = 0
		Box.Position = dn(0.774615362, 0, 0.178571433, 0)
		Box.Size = dn(0, 65, 0, 18)
		Box.Font = Enum.Font.Gotham
		Box.Text = ""
		Box.PlaceholderText = tostring(placeholder or "")
		Box.PlaceholderColor3 = THEME.SUBTEXT
		Box.TextColor3 = THEME.TEXT
		Box.TextSize = 12

		BoxCorner.CornerRadius = R.small
		BoxCorner.Parent = Box

		Box.FocusLost:Connect(function(enter)
			if not enter then return end
			pcall(callback, Box.Text)
			if ENV.ClearTextBoxText then
				task.wait(0.10)
				Box.Text = ""
			end
		end)
	end

	return API
end

setmetatable(library, {
	__newindex = function(self, i, v)
		if i == 'Name' then
			local titleLabel = Main:FindFirstChildWhichIsA("TextLabel")
			if titleLabel then
				titleLabel.Text = "   " .. tostring(v)
			end
			return true
		end
		rawset(self, i, v)
	end
})